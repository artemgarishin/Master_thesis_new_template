\BOOKMARK [0][-]{chapter.1}{Introduction}{}% 1
\BOOKMARK [0][-]{chapter.2}{Description of problem}{}% 2
\BOOKMARK [1][-]{section.2.1}{Insufficiency of textual comparison approach}{chapter.2}% 3
\BOOKMARK [1][-]{section.2.2}{Structural graph comparison is NP-complete problem}{chapter.2}% 4
\BOOKMARK [0][-]{chapter.3}{Existing comparison methods for plagiarism detection}{}% 5
\BOOKMARK [1][-]{section.3.1}{Plagiarism detection methods}{chapter.3}% 6
\BOOKMARK [1][-]{section.3.2}{Text-based Techniques}{chapter.3}% 7
\BOOKMARK [1][-]{section.3.3}{Token-based Techniques}{chapter.3}% 8
\BOOKMARK [1][-]{section.3.4}{Tree-based Techniques}{chapter.3}% 9
\BOOKMARK [1][-]{section.3.5}{PDG-based Techniques}{chapter.3}% 10
\BOOKMARK [0][-]{chapter.4}{Maximum common subtree isomorphism algorithms}{}% 11
\BOOKMARK [1][-]{section.4.1}{Top-down maximum common sub-tree isomorphism algorithm}{chapter.4}% 12
\BOOKMARK [1][-]{section.4.2}{Bottom-Up maximum common sub-tree isomorphism algorithm }{chapter.4}% 13
\BOOKMARK [0][-]{chapter.5}{Experimental analysis between structural and textual methods of code comparison}{}% 14
\BOOKMARK [1][-]{section.5.1}{Introduction in experiments}{chapter.5}% 15
\BOOKMARK [1][-]{section.5.2}{Experiments on Java source code flowcharts}{chapter.5}% 16
\BOOKMARK [1][-]{section.5.3}{Experiments using Abstract Syntax Tree graphs}{chapter.5}% 17
\BOOKMARK [1][-]{section.5.4}{Experiments on JavaByte Code}{chapter.5}% 18
\BOOKMARK [0][-]{chapter.6}{Graph transformation algorithms}{}% 19
\BOOKMARK [1][-]{section.6.1}{Introduction to the graph transformation}{chapter.6}% 20
\BOOKMARK [0][-]{chapter.7}{Techniques to normalize AST improving structural comparison}{}% 21
\BOOKMARK [0][-]{chapter.8}{Text comparison improvement with AST trees}{}% 22
\BOOKMARK [0][-]{chapter.9}{Conclusion}{}% 23
\BOOKMARK [0][-]{chapter*.4}{Bibliography}{}% 24
